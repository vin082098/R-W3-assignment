## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some 
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that 
## stores a matrix and caches its inverse.

## This function creates a special "matrix" object that can cache its inverse.


makeCacheMatrix <- function(x = matrix()) {
        inver <- NULL
        set <- function(y) {
                x <<- y
                inver <<- NULL
        }
        get <- function()x
        set_inverse <- function(inverse) inver <<- inverse
        get_inverse <- function() inver
        list(set = set,
             get = get,
             set_inverse = set_inverse,
             get_inverse = get_inverse)
}


## cacheSolve`: This function computes the inverse of the special
## "matrix" returned by `makeCacheMatrix` above. If the inverse has
## already been calculated (and the matrix has not changed), then
## `cacheSolve` should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
        inver <- x$get_inverse()
        if(!is.null(inver)){
                message("Getting cached data")
                return(inver)
        }
        mat <- x$get()
        inver <- solve(mat, ...)
        x$set_inverse(inver)
}

## test functions
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))

my_matrix$get()
my_matrix$get_inverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$get_inverse()
        
